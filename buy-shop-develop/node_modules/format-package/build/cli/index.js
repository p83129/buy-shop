#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.handleFile = void 0;
const path = require("path");
const fs = require("fs-extra");
const globby = require("globby");
const lib_1 = require("../lib");
const timer_1 = require("../utils/timer");
const parse_1 = require("./parse");
const configSearch = require("./config");
const error_1 = require("./error");
exports.handleFile = ({ write, verbose }, config) => (filePath) => __awaiter(void 0, void 0, void 0, function* () {
    const timer = new timer_1.default();
    timer.start();
    const prevPkg = fs.readJSONSync(filePath, { encoding: 'utf8' });
    const nextPkg = yield lib_1.default(prevPkg, config, filePath);
    if (write) {
        fs.writeFileSync(filePath, nextPkg, 'utf8');
    }
    const elapsed = timer.end();
    if (verbose || !write) {
        console.log(nextPkg);
    }
    else {
        console.log(`${path.relative('', filePath)} (${elapsed.milliseconds.toFixed(2)}ms)`);
    }
});
function execute(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const timer = new timer_1.default();
            timer.start();
            const _a = parse_1.default(argv), { globs, config: configPath, ignore } = _a, options = __rest(_a, ["globs", "config", "ignore"]);
            const { config, filepath, isDefault } = yield configSearch.search({
                configPath,
            });
            const files = yield globby(globs, {
                cwd: process.cwd(),
                onlyFiles: true,
                ignore,
                absolute: true,
            });
            yield Promise.all(files.map((file) => path.resolve(file)).map(exports.handleFile(options, config)));
            /* istanbul ignore next */
            console.log(`✏️   Formatted ${files.length} file${files.length === 1 ? '' : 's'}${isDefault ? '.' : ` with ${filepath}.`}`);
        }
        catch (err) {
            error_1.default(err);
        }
    });
}
exports.execute = execute;
/* istanbul ignore next */
if (require.main === module)
    execute(process.argv.slice(2));
//# sourceMappingURL=index.js.map